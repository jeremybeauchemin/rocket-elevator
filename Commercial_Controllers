SET TotalFloors TO [66]
SET RC TO [7]
SET DefaultFloor TO [7]
SET NbColum IN Battery TO 4
SET NbElevator IN EACH Column TO 3
SET Column[1] TO [7 AND 1 TO 6]
SET Column[2] TO [7 TO 26]
SET Column[3] TO [7 AND 26 TO 46]
SET Column[4] TO [7 AND 46 TO 66]

SEQUENCE CallElevator(Direction,Floor, Column)
    CALL AcivateButton(Direction,Floor, Column)
    CALL FindElevator(Direction,Floor, Column)
    CaLL RequestElevator(ElevatorNumber,Floor, Column)
END SEQUENCE

SEQUENCE CallInside (Elevator,Floor, Column)
  SET ButtonsInside Activate
  CALL Request(Elevator,Floor, Column)
END SEQUENCE

SEQUENCE ActivateButton(Direction, Floor, Column)
  CALL FindButton (Direction, Floor, Column) RETURNING FindButton
  SET Button Active
  SET Floor TO Active Button
END SEQUENCE

SEQUENCE ActivateInsideButton(Floor, Column)
  SET Button Active
   READ ActivateInsideButton
    SET Floor TO ActivateInsideButton
 CALL RequestedFloor(Elevator, Floor, Column)
END SEQUENCE

SEQUENCE CallFloorFromInside(Elevator, Floor, Column)
   SET InsideButton Active
   READ Active InsideButton
   SET Floor TO ActiveInsideButton
   CALL RequestFloor(Elevator, Floor, Column)
END SEQUENCE

SEQUENCE DesactivateInsideButton(Elevator, Floor, Column)
 IF CurrentFloor = Active InsideButton
 SET InsideButton Inactive
END SEQUENCE

SEQUENCE DeactivateButton(Floor, Column)
    CALL FindButton (Direction,Floor, Column)
    SET Button Active
END SEQUENCE

SEQUENCE Find Button(Direction, Floor, Column)
   FOR EACH Button IN Buttons
     IF Floor = ButtonFloor AND Direction = ButtonDirection
      THEN RETURN Button
    END FOR
  END SEQUENCE

  SEQUENCE FindElevator(Direction, RequestedFloor, Column)
   WHILE Elevator IS Undefined
       FOR EACH Column in Colums
           IF Floor IS IN Column Range THEN
               FOR  EACH Elevator IN Column

            IF Floor = CurrentFloor THEN
              if Status IS Stopped AND ElevatorDirection IS Direction THEN
                   RETURN Elevator
              ELSE IF status IS Idle AND ElevatorDirection IS Direction THEN
                   RETURN Elevator

               ELSE IF Floor > CurrentFloor
                  ELSE IF Status is Moving AND ElevatorDirection IS GoingUp AND Direction IS ElevatorDirection THEN
                          RETURN Elevator
                  ELSE IF Status is Stopped AND ElevatorDirection IS Direction AND Direction IS ElevatorDirection THEN
                              RETURN Elevator

                ELSE IF Floor < CurrentFloor
                      ELSE IF Status is Moving AND ElevatorDirection IS GoingUp AND Direction IS ElevatorDirection THEN
                              RETURN Elevator
                      ELSE IF Status is Stopped AND ElevatorDirection IS GoingDown AND Direction IS ElevatorDirection THEN
                                  RETURN Elevator
                  ELSE IF Status IS idle THEN
                    RETURN Elevator

           END IF
        END FOR
     END WHILE
  END SEQUENCE

  SEQUENCE Elevator.IsShortestFloorList (FloorList)
  FOR EACH FloorList IN FloorLists
      IF FloorList.Length1 > FloorList.Length2 THEN
          RETURN Elevator
      ELSE RETURN Elevator
      END IF
  END FOR
END SEQUENCE

SEQUENCE IsNearestElevator (CurrentFloor,Floor)
        COMPUTE ReferenceGap = |Floor - CurrentFloor|
     FOR EACH Elevator IN Elevators
        COMPUTE Gap = |ElevatorCurrentFloor - Floor|
      IF ReferenceGap > Gap THEN
          RETURN False
     END FOR
   RETURN True
END SEQUENCE

SEQUENCE Request(Elevator, Floor, Column)
    IF Status IS Idle THEN
       ADD Floor TO FloorList

    ELSE IF ElevatorDirection IS GoingUp AND Floor > CurrentFloor THEN
        ADD Floor TO FloorList

    ELSE IF ElevatorDirection IS GoingDown AND Floor < CurrentFloor THEN
        ADD Floor TO FloorList

    ELSE
        CALL DesactivateInsideButton(Elevator, Floor, Column)
    END IF
    CALL BubbleSort(FloorList,ElevatorDirection) RETURNING SortedFloorList
    CALL FloorList TO SortFloorList
    CALL OperateElevator (Elevator)
END SEQUENCE

  SEQUENCE RequestFloor(Elevator,Floor)
    IF (ElevatorDirection IS GoingUp AND Floor > CurrentFloor) THEN
      ADD Floor TO FloorList
    ELSE IF (ElevatorDirection IS GoingDown AND Floor IS < CurrentFloor) THEN
      ADD Floor TO FloorList
    END IF
     CALL SortFloorList RETURNING SortedFloorList
     SET FloorList TO SortedFloorList
  END SEQUENCE

SEQUENCE OpenDoor (Elevator)
    REPEAT
       Open
          SET Wait TO 5 Seconds
          SET Status TO STOPPED
       UNTIL Door Is Not Blocked
        CALL VerifyWeight (weight)
        Call CloseDoor (Elevator)
END SEQUENCE

SEQUENCE CloseDoor (Elevator)
   Start Closing Door
   REPEAT
      IF Door IS Closing AND IS Obstructed THEN
        CALL OpenDoor(Elevator)
    UNTIL Door IS Closed
      IF Floorlist IS EMPTY THEN
        SET Status TO Idle
      ELSE IF FloorList NOT EMPTY THEN
        SET Status TO Stopped
    END IF
 END SEQUENCE

 SEQUENCE GoingUp(CurrentFloor, Floor, Column)
      COMPUTE CurrentFloor = Floor +1
   SET Status TO Moving
   SET ElevatorDirection TO ButtonDirection
 END SEQUENCE

 SEQUENCE GoingDown (CurrentFloor, Floor, Column)
    COMPUTE CurrentFloor = Floor -1
    SET Status TO Moving
    SET ElevatorDirection TO ButtonDirection
 END SEQUENCE

SEQUENCE RequestElevator (Elevator, RequestedElevator, Column)
  ADD RequestFloor TO FloorList
  CALL ShortestFloorList RETURNING SortFloorList
  SET FloorList TO SortedFloorList
END SEQUENCE

SEQUENCE OperateElevator (Elevator)
    WHILE(FloorList IS NOT EMPTY)
    READ Floor FROM FloorList
    IF CurrentFloor IS Floor THEN
        CALL OpenDoor (Elevator)
        CALL DeactivateInsideButton
        CALL DeactivateButton
    IF CurrentFloor > Floor THEN
        CALL GoingDOWn (Elevator, Floor)
    IF CurrentFloor < Floor THEN
        CALL GoingUp (Elevator, Floor)
    END IF
   SET Status TO Idle
END SEQUENCE

SEQUENCE VerifyWeight
   CASE weight OF
       CurrentWeight > MaxWeight : SET Status TO Maintenance
       CurrentWeight = MaxWeight : SET status TO MaxWeight || don't take other stops
       OTHERS : CALL RequestFloor (Elevator, Floor)
END SEQUENCE

SEQUENCE SortFloorList (FloorList, Column)
  IF ElevatorDirection IS GoingUp THEN
     n = length(A)
    REPEAT
        newn = 0
        FOR i = 1 TO n-1 Inclusive DO
            if A[i-1] > A[i] THEN
                swap( A[i], A[i+1])
                newn = i
            END IF
        END FOR
        n = newn
    UNTIL n = 0
  RETURN SortFloorList

  ELSE IF ElevatorDirection IS GoingDown THEN
      n = length(A)
      REPEAT
          newn = 0
            FOR i = 1 TO n-1 Inclusive DO
               if A[i-1] < A[i] THEN
              swap( A[i], A[i+1])
              newn = i
          END IF
      END FOR
      n = newn
   UNTIL n = 0
  RETURN SortFloorList
END SEQUENCE

SEQUENCE Schedule (Status, DayTime, Elevator, Column)
  WHILE Status IS idle AND Floor NOT
      FOR EACH Elevator IN elevators
        IF DayTime > 5 AND DayTime < 9 THEN
            ADD Floor[5] TO FloorList
        ELSE IF DayTime > 16 AND DayTime < 18 THEN
            ADD Floor TO FloorList
        END IF
    END FOR
  END WHILE
END SEQUENCE
