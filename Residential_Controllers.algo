
SEQUENCE CallElevator(Direction,Floor)
    CALL AcivateButton (Direction,Floor)
    CALL FindElevator (Direction,Floor) RETURNING ElevatorNumber
    CaLL RequestElevator (ElevatorNumber,Floor)
END SEQUENCE

SEQUENCE CallInside (Elevator,Floor)
  SET ButtonsInside Activate
  CALL Request ( Elevator,Floor)
END SEQUENCE

SEQUENCE ActivateButton(Direction,Floor)
  CALL FindButton (Direction,Floor) RETURNING FindButton
  SET Button Active
END SEQUENCE

SEQUENCE CallFloorFromInside (Elevator, Floor)
   SET InsideButton Active
   READ Active InsideButton
   SET Floor TO Active InsideButton
   CALL RequestFloor (Elevator, Floor)
END SEQUENCE

SEQUENCE DeactivateInsideButton (Elevator, Floor)
 IF CurrentFloor = Active InsideButton
 SET InsideButton Inactive
END SEQUENCE

SEQUENCE DesactivateInsideButton(Floor)
        FOR EACH button IN ButtonsInside
        IF Floor = ButtonFloor
        THEN SET Button Inactive
    END FOR
END SEQUENCE

SEQUENCE Find Button (Direction,Floor)
   FOR EACH Button IN Buttons
     IF Floor = ButtonFloor AND Direction = ButtonDirection
      THEN RETURN Button
    END FOR
  END SEQUENCE

  SEQUENCE ActivateInsideButton(Floor)
   SET Button Active
   READ ActivateInsideButton
   SET Floor TO ActivateInsideButton
   CALL RequestedFloor(Elevator, Floor)
END SEQUENCE

  SEQUENCE FindElevator(Direction,Floor)
      WHILE Elevator NOT Found
         FOR EACH Elevator in elevators
            IF Floor = CurrentFloor THEN
              if Status IS Stopped AND ElevatorDirection IS Direction THEN
                   RETURN Elevator
              ELSE IS status IS Idle THEN
                   RETURN Elevator

            ELSE IF Floor > CurrentFloor THEN
                IF Status IS Moving AND ElevatorDirection IS GoingUp AND ElevatorDirection IS Direction THEN
                       RETURN Elevator
                ELSE IF Status IS Idle THEN
                   RETURN Elevator
                ELSE IF Status IS Stopped AND ElevatorDirection IS  GoingUp AND ElevatorDirection IS Direction THEN
                    RETURN Elevator
                ELSE IF CALL ElevatorDirection RETURNING TRUE AND CALL IsNearestElevator(CurrentFloor,Floor) RETURNING TRUE THEN
                   RETURN Elevator


            ELSE IF Floor < CurrentFloor THEN
              IF Status IS Moving AND ElevatorDirection IS GoingDown AND ElevatorDirection IS Direction THEN
                   RETURN Elevator
              ELSE IF Status IS Idle THEN
                  RETURN Elevator
              ELSE IF Status IS Stopped AND ElevatorDirection IS  GoingDown AND ElevatorDirection IS Direction THEN
                  RETURN Elevator
              ELSE IF  ElevatorDirection RETURNING TRUE AND CALL IsNearestElevator(CurrentFloor,Floor) RETURNING TRUE THEN
                  RETURN Elevator

               ELSE CALL IsShortestFloorList THEN
                  RETURN Elevator

           END IF
        END FOR
     END WHILE
  END SEQUENCE

  SEQUENCE Elevator.IsShortestFloorList (FloorList)
  FOR EACH FloorList IN FloorLists
      IF FloorList.Length1 > FloorList.Length2 THEN
          RETURN Elevator
      ELSE RETURN Elevator
      END IF
  END FOR
END SEQUENCE

SEQUENCE IsNearestElevator (CurrentFloor,Floor)
        COMPUTE ReferenceGap = |Floor - CurrentFloor|
     FOR EACH Elevator IN Elevators
        COMPUTE Gap = |ElevatorCurrentFloor - Floor|
      IF ReferenceGap > Gap THEN
          RETURN False
     END FOR
   RETURN True
END SEQUENCE

  SEQUENCE RequestFloor(Elevator,Floor)
    IF (ElevatorDirection IS GoingUp AND Floor > CurrentFloor) THEN
      ADD Floor TO FloorList
    ELSE IF (ElevatorDirection IS GoingDown AND Floor IS < CurrentFloor) THEN
      ADD Floor TO FloorList
    END IF
       CALL SortFloorList RETURNING SortedFloorList
       SET FloorList TO SortedFloorList
  END SEQUENCE

  SEQUENCE OpenDoor (Elevator)
     SET Status To Stopped
   CALL FindActivateButton (Direction,Floor) RETURNING ActivateButton
   DeactivateButton (ElevatorDirection,CurrentFloor)
   REPEAT
       OpenDoor
       INIT Timer TO 5 Seconds
   UNTIL Door NOT Obstructed
   REMOVE FloorList
   CALL CloseDoor (Elevator)
END SEQUENCE

  SEQUENCE CloseDoor (Elevator)
   Start Closing Door
    IF Door IS Closing AND NOT Blocked
     THEN
      RETURN Close
    ELSE
     CALL OpenDoor (Elevator)
    END IF
 END SEQUENCE

  SEQUENCE GoingUp (CurrentFloor,Floor)
       COMPUTE CurrentFloor = Floor +1
    CALL OperateElevator (CurrentFloor,Floor)
  END SEQUENCE

  SEQUENCE GoingDown (CurrentFloor,Floor)
     COMPUTE CurrentFloor = Floor -1
    CALL OperateElevator (CurrentFloor,Floor)
  END SEQUENCE

SEQUENCE RequestElevator (Elevator,RequestedElevator)
  ADD RequestFloor TO FloorList
  CALL ShortestFloorList RETURNING SortFloorList
  SET FloorList TO SortedFloorList
END SEQUENCE

SEQUENCE OperateElevator (Elevator)
    READ Floor FROM FloorList
    IF CurrentFloor IS Floor THEN
        CALL OpenDoor (Elevator)
        CALL DeactivateInsideButton
        CALL DeactivateButton
    IF CurrentFloor > Floor THEN
        CALL GoingUp (Elevator, Floor)
    IF CurrentFloor < Floor THEN
        CALL GoingDown (Elevator, Floor)
    END IF
END SEQUENCE

SEQUENCE VerifyWeight
   CASE weight OF
       CurrentWeight > MaxWeight : SET Status TO Maintenance
       CurrentWeight = MaxWeight : SET status TO MaxWeight || don't take other stops
       OTHERS : CALL RequestFloor (Elevator, Floor)
END SEQUENCE

SEQUENCE SortFloorList (FloorList)
  IF ElevatorDirection IS GoingUp THEN
     n = length(A)
    REPEAT
        newn = 0
        FOR i = 1 TO n-1 Inclusive DO
            if A[i-1] > A[i] THEN
                swap( A[i], A[i+1])
                newn = i
            END IF
        END FOR
        n = newn
    UNTIL n = 0
  RETURN SortFloorList

  ELSE IF ElevatorDirection IS GoingDown THEN
      n = length(A)
      REPEAT
          newn = 0
            FOR i = 1 TO n-1 Inclusive DO
               if A[i-1] < A[i] THEN
              swap( A[i], A[i+1])
              newn = i
          END IF
      END FOR
      n = newn
   UNTIL n = 0
  RETURN SortFloorList
END SEQUENCE
